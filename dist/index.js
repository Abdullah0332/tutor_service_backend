"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _connection = _interopRequireDefault(require("./db/connection.js"));

var _morgan = _interopRequireDefault(require("morgan"));

var _chalk = _interopRequireDefault(require("chalk"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _routes = _interopRequireDefault(require("./routes/routes.js"));

var PORT = process.env.PORT || 3000; //@initializing App

var app = (0, _express["default"])();
app.use((0, _morgan["default"])("dev"));
app.use((0, _cors["default"])({
  origin: true
}));
app.use(_bodyParser["default"].json({
  limit: "30mb",
  extended: true
}));
app.use(_bodyParser["default"].urlencoded({
  limit: "30mb",
  extended: true
}));
app.use("/api", _routes["default"]); // Handle Uncaught exceptions

process.on("uncaughtException", function (err) {
  console.log(_chalk["default"].bold.red("ERROR MESSAGE: "), _chalk["default"].bold.blue("".concat(err.message))); // console.log(chalk.bold.red(`ERROR STACK: `), `${err.stack}`);

  console.log(_chalk["default"].red("Shutting Down Server due to Uncaught Exception"));
  process.exit(1);
}); // Handle Unhandled Promise rejections

process.on("unhandledRejection", function (err) {
  console.log(_chalk["default"].bold.red("ERROR MESSAGE: "), _chalk["default"].bold.blue("".concat(err.message)));
  console.log(_chalk["default"].bold.red("ERROR STACK: "), "".concat(err.stack));
  console.log(_chalk["default"].bold.red("Shutting down the server due to Unhandled Promise rejection"));
  process.exit(1);
}); //@Starting Server

app.listen(PORT, function (err) {
  if (err) console.log(_chalk["default"].bold.red("".concat(err.message)), err);
  console.log(_chalk["default"].bold.green("âœ“"), "Listening on port ".concat(PORT));
}); // @Connecting to Database

(0, _connection["default"])();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJQT1JUIiwicHJvY2VzcyIsImVudiIsImFwcCIsInVzZSIsIm9yaWdpbiIsImJvZHlQYXJzZXIiLCJqc29uIiwibGltaXQiLCJleHRlbmRlZCIsInVybGVuY29kZWQiLCJhcGlSb3V0ZXIiLCJvbiIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJjaGFsayIsImJvbGQiLCJyZWQiLCJibHVlIiwibWVzc2FnZSIsImV4aXQiLCJzdGFjayIsImxpc3RlbiIsImdyZWVuIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBRUEsSUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsSUFBWixJQUFvQixJQUFqQyxDLENBRUE7O0FBQ0EsSUFBTUcsR0FBRyxHQUFHLDBCQUFaO0FBQ0FBLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLHdCQUFPLEtBQVAsQ0FBUjtBQUNBRCxHQUFHLENBQUNDLEdBQUosQ0FBUSxzQkFBSztBQUFFQyxFQUFBQSxNQUFNLEVBQUU7QUFBVixDQUFMLENBQVI7QUFFQUYsR0FBRyxDQUFDQyxHQUFKLENBQVFFLHVCQUFXQyxJQUFYLENBQWdCO0FBQUVDLEVBQUFBLEtBQUssRUFBRSxNQUFUO0FBQWlCQyxFQUFBQSxRQUFRLEVBQUU7QUFBM0IsQ0FBaEIsQ0FBUjtBQUNBTixHQUFHLENBQUNDLEdBQUosQ0FBUUUsdUJBQVdJLFVBQVgsQ0FBc0I7QUFBRUYsRUFBQUEsS0FBSyxFQUFFLE1BQVQ7QUFBaUJDLEVBQUFBLFFBQVEsRUFBRTtBQUEzQixDQUF0QixDQUFSO0FBRUFOLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLE1BQVIsRUFBZ0JPLGtCQUFoQixFLENBRUE7O0FBQ0FWLE9BQU8sQ0FBQ1csRUFBUixDQUFXLG1CQUFYLEVBQWdDLFVBQUNDLEdBQUQsRUFBUztBQUN2Q0MsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQ0VDLGtCQUFNQyxJQUFOLENBQVdDLEdBQVgsbUJBREYsRUFFRUYsa0JBQU1DLElBQU4sQ0FBV0UsSUFBWCxXQUFtQk4sR0FBRyxDQUFDTyxPQUF2QixFQUZGLEVBRHVDLENBS3ZDOztBQUNBTixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsa0JBQU1FLEdBQU4sQ0FBVSxnREFBVixDQUFaO0FBQ0FqQixFQUFBQSxPQUFPLENBQUNvQixJQUFSLENBQWEsQ0FBYjtBQUNELENBUkQsRSxDQVVBOztBQUNBcEIsT0FBTyxDQUFDVyxFQUFSLENBQVcsb0JBQVgsRUFBaUMsVUFBQ0MsR0FBRCxFQUFTO0FBQ3hDQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FDRUMsa0JBQU1DLElBQU4sQ0FBV0MsR0FBWCxtQkFERixFQUVFRixrQkFBTUMsSUFBTixDQUFXRSxJQUFYLFdBQW1CTixHQUFHLENBQUNPLE9BQXZCLEVBRkY7QUFJQU4sRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlDLGtCQUFNQyxJQUFOLENBQVdDLEdBQVgsaUJBQVosWUFBZ0RMLEdBQUcsQ0FBQ1MsS0FBcEQ7QUFDQVIsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQ0VDLGtCQUFNQyxJQUFOLENBQVdDLEdBQVgsQ0FDRSw2REFERixDQURGO0FBS0FqQixFQUFBQSxPQUFPLENBQUNvQixJQUFSLENBQWEsQ0FBYjtBQUNELENBWkQsRSxDQWNBOztBQUNBbEIsR0FBRyxDQUFDb0IsTUFBSixDQUFXdkIsSUFBWCxFQUFpQixVQUFDYSxHQUFELEVBQVM7QUFDeEIsTUFBSUEsR0FBSixFQUFTQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsa0JBQU1DLElBQU4sQ0FBV0MsR0FBWCxXQUFrQkwsR0FBRyxDQUFDTyxPQUF0QixFQUFaLEVBQThDUCxHQUE5QztBQUNUQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsa0JBQU1DLElBQU4sQ0FBV08sS0FBWCxDQUFpQixHQUFqQixDQUFaLDhCQUF3RHhCLElBQXhEO0FBQ0QsQ0FIRCxFLENBSUE7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgY29ycyBmcm9tIFwiY29yc1wiO1xyXG5pbXBvcnQgZGJDb25uZWN0aW9uIGZyb20gXCIuL2RiL2Nvbm5lY3Rpb24uanNcIjtcclxuaW1wb3J0IG1vcmdhbiBmcm9tIFwibW9yZ2FuXCI7XHJcbmltcG9ydCBjaGFsayBmcm9tIFwiY2hhbGtcIjtcclxuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSBcImJvZHktcGFyc2VyXCI7XHJcblxyXG5pbXBvcnQgYXBpUm91dGVyIGZyb20gXCIuL3JvdXRlcy9yb3V0ZXMuanNcIjtcclxuXHJcbmNvbnN0IFBPUlQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDA7XHJcblxyXG4vL0Bpbml0aWFsaXppbmcgQXBwXHJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcclxuYXBwLnVzZShtb3JnYW4oXCJkZXZcIikpO1xyXG5hcHAudXNlKGNvcnMoeyBvcmlnaW46IHRydWUgfSkpO1xyXG5cclxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oeyBsaW1pdDogXCIzMG1iXCIsIGV4dGVuZGVkOiB0cnVlIH0pKTtcclxuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBsaW1pdDogXCIzMG1iXCIsIGV4dGVuZGVkOiB0cnVlIH0pKTtcclxuXHJcbmFwcC51c2UoXCIvYXBpXCIsIGFwaVJvdXRlcik7XHJcblxyXG4vLyBIYW5kbGUgVW5jYXVnaHQgZXhjZXB0aW9uc1xyXG5wcm9jZXNzLm9uKFwidW5jYXVnaHRFeGNlcHRpb25cIiwgKGVycikgPT4ge1xyXG4gIGNvbnNvbGUubG9nKFxyXG4gICAgY2hhbGsuYm9sZC5yZWQoYEVSUk9SIE1FU1NBR0U6IGApLFxyXG4gICAgY2hhbGsuYm9sZC5ibHVlKGAke2Vyci5tZXNzYWdlfWApXHJcbiAgKTtcclxuICAvLyBjb25zb2xlLmxvZyhjaGFsay5ib2xkLnJlZChgRVJST1IgU1RBQ0s6IGApLCBgJHtlcnIuc3RhY2t9YCk7XHJcbiAgY29uc29sZS5sb2coY2hhbGsucmVkKFwiU2h1dHRpbmcgRG93biBTZXJ2ZXIgZHVlIHRvIFVuY2F1Z2h0IEV4Y2VwdGlvblwiKSk7XHJcbiAgcHJvY2Vzcy5leGl0KDEpO1xyXG59KTtcclxuXHJcbi8vIEhhbmRsZSBVbmhhbmRsZWQgUHJvbWlzZSByZWplY3Rpb25zXHJcbnByb2Nlc3Mub24oXCJ1bmhhbmRsZWRSZWplY3Rpb25cIiwgKGVycikgPT4ge1xyXG4gIGNvbnNvbGUubG9nKFxyXG4gICAgY2hhbGsuYm9sZC5yZWQoYEVSUk9SIE1FU1NBR0U6IGApLFxyXG4gICAgY2hhbGsuYm9sZC5ibHVlKGAke2Vyci5tZXNzYWdlfWApXHJcbiAgKTtcclxuICBjb25zb2xlLmxvZyhjaGFsay5ib2xkLnJlZChgRVJST1IgU1RBQ0s6IGApLCBgJHtlcnIuc3RhY2t9YCk7XHJcbiAgY29uc29sZS5sb2coXHJcbiAgICBjaGFsay5ib2xkLnJlZChcclxuICAgICAgXCJTaHV0dGluZyBkb3duIHRoZSBzZXJ2ZXIgZHVlIHRvIFVuaGFuZGxlZCBQcm9taXNlIHJlamVjdGlvblwiXHJcbiAgICApXHJcbiAgKTtcclxuICBwcm9jZXNzLmV4aXQoMSk7XHJcbn0pO1xyXG5cclxuLy9AU3RhcnRpbmcgU2VydmVyXHJcbmFwcC5saXN0ZW4oUE9SVCwgKGVycikgPT4ge1xyXG4gIGlmIChlcnIpIGNvbnNvbGUubG9nKGNoYWxrLmJvbGQucmVkKGAke2Vyci5tZXNzYWdlfWApLCBlcnIpO1xyXG4gIGNvbnNvbGUubG9nKGNoYWxrLmJvbGQuZ3JlZW4oXCLinJNcIiksIGBMaXN0ZW5pbmcgb24gcG9ydCAke1BPUlR9YCk7XHJcbn0pO1xyXG4vLyBAQ29ubmVjdGluZyB0byBEYXRhYmFzZVxyXG5kYkNvbm5lY3Rpb24oKTtcclxuIl19