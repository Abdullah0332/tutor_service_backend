"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _connection = _interopRequireDefault(require("./db/connection.js"));

var _morgan = _interopRequireDefault(require("morgan"));

var _chalk = _interopRequireDefault(require("chalk"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _routes = _interopRequireDefault(require("./routes/routes.js"));

var PORT = process.env.PORT || 3000; //@initializing App

var app = (0, _express["default"])();
app.use((0, _morgan["default"])("dev"));
app.use((0, _cors["default"])({
  origin: true
}));
app.use(_bodyParser["default"].json({
  limit: "30mb",
  extended: true
}));
app.use(_bodyParser["default"].urlencoded({
  limit: "30mb",
  extended: true
}));
app.use("/api", _routes["default"]);
app.use("/", function (req, res, next) {
  res.send("Backend Running.");
}); // Handle Uncaught exceptions

process.on("uncaughtException", function (err) {
  console.log(_chalk["default"].bold.red("ERROR MESSAGE: "), _chalk["default"].bold.blue("".concat(err.message))); // console.log(chalk.bold.red(`ERROR STACK: `), `${err.stack}`);

  console.log(_chalk["default"].red("Shutting Down Server due to Uncaught Exception"));
  process.exit(1);
}); // Handle Unhandled Promise rejections

process.on("unhandledRejection", function (err) {
  console.log(_chalk["default"].bold.red("ERROR MESSAGE: "), _chalk["default"].bold.blue("".concat(err.message)));
  console.log(_chalk["default"].bold.red("ERROR STACK: "), "".concat(err.stack));
  console.log(_chalk["default"].bold.red("Shutting down the server due to Unhandled Promise rejection"));
  process.exit(1);
}); //@Starting Server

app.listen(PORT, function (err) {
  if (err) console.log(_chalk["default"].bold.red("".concat(err.message)), err);
  console.log(_chalk["default"].bold.green("âœ“"), "Listening on port ".concat(PORT));
}); // @Connecting to Database

(0, _connection["default"])();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJQT1JUIiwicHJvY2VzcyIsImVudiIsImFwcCIsInVzZSIsIm9yaWdpbiIsImJvZHlQYXJzZXIiLCJqc29uIiwibGltaXQiLCJleHRlbmRlZCIsInVybGVuY29kZWQiLCJhcGlSb3V0ZXIiLCJyZXEiLCJyZXMiLCJuZXh0Iiwic2VuZCIsIm9uIiwiZXJyIiwiY29uc29sZSIsImxvZyIsImNoYWxrIiwiYm9sZCIsInJlZCIsImJsdWUiLCJtZXNzYWdlIiwiZXhpdCIsInN0YWNrIiwibGlzdGVuIiwiZ3JlZW4iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFFQSxJQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixJQUFaLElBQW9CLElBQWpDLEMsQ0FFQTs7QUFDQSxJQUFNRyxHQUFHLEdBQUcsMEJBQVo7QUFDQUEsR0FBRyxDQUFDQyxHQUFKLENBQVEsd0JBQU8sS0FBUCxDQUFSO0FBQ0FELEdBQUcsQ0FBQ0MsR0FBSixDQUFRLHNCQUFLO0FBQUVDLEVBQUFBLE1BQU0sRUFBRTtBQUFWLENBQUwsQ0FBUjtBQUVBRixHQUFHLENBQUNDLEdBQUosQ0FBUUUsdUJBQVdDLElBQVgsQ0FBZ0I7QUFBRUMsRUFBQUEsS0FBSyxFQUFFLE1BQVQ7QUFBaUJDLEVBQUFBLFFBQVEsRUFBRTtBQUEzQixDQUFoQixDQUFSO0FBQ0FOLEdBQUcsQ0FBQ0MsR0FBSixDQUFRRSx1QkFBV0ksVUFBWCxDQUFzQjtBQUFFRixFQUFBQSxLQUFLLEVBQUUsTUFBVDtBQUFpQkMsRUFBQUEsUUFBUSxFQUFFO0FBQTNCLENBQXRCLENBQVI7QUFFQU4sR0FBRyxDQUFDQyxHQUFKLENBQVEsTUFBUixFQUFnQk8sa0JBQWhCO0FBRUFSLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLEdBQVIsRUFBYSxVQUFDUSxHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxFQUFvQjtBQUMvQkQsRUFBQUEsR0FBRyxDQUFDRSxJQUFKLENBQVMsa0JBQVQ7QUFDRCxDQUZELEUsQ0FJQTs7QUFDQWQsT0FBTyxDQUFDZSxFQUFSLENBQVcsbUJBQVgsRUFBZ0MsVUFBQ0MsR0FBRCxFQUFTO0FBQ3ZDQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FDRUMsa0JBQU1DLElBQU4sQ0FBV0MsR0FBWCxtQkFERixFQUVFRixrQkFBTUMsSUFBTixDQUFXRSxJQUFYLFdBQW1CTixHQUFHLENBQUNPLE9BQXZCLEVBRkYsRUFEdUMsQ0FLdkM7O0FBQ0FOLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxrQkFBTUUsR0FBTixDQUFVLGdEQUFWLENBQVo7QUFDQXJCLEVBQUFBLE9BQU8sQ0FBQ3dCLElBQVIsQ0FBYSxDQUFiO0FBQ0QsQ0FSRCxFLENBVUE7O0FBQ0F4QixPQUFPLENBQUNlLEVBQVIsQ0FBVyxvQkFBWCxFQUFpQyxVQUFDQyxHQUFELEVBQVM7QUFDeENDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUNFQyxrQkFBTUMsSUFBTixDQUFXQyxHQUFYLG1CQURGLEVBRUVGLGtCQUFNQyxJQUFOLENBQVdFLElBQVgsV0FBbUJOLEdBQUcsQ0FBQ08sT0FBdkIsRUFGRjtBQUlBTixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsa0JBQU1DLElBQU4sQ0FBV0MsR0FBWCxpQkFBWixZQUFnREwsR0FBRyxDQUFDUyxLQUFwRDtBQUNBUixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FDRUMsa0JBQU1DLElBQU4sQ0FBV0MsR0FBWCxDQUNFLDZEQURGLENBREY7QUFLQXJCLEVBQUFBLE9BQU8sQ0FBQ3dCLElBQVIsQ0FBYSxDQUFiO0FBQ0QsQ0FaRCxFLENBY0E7O0FBQ0F0QixHQUFHLENBQUN3QixNQUFKLENBQVczQixJQUFYLEVBQWlCLFVBQUNpQixHQUFELEVBQVM7QUFDeEIsTUFBSUEsR0FBSixFQUFTQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsa0JBQU1DLElBQU4sQ0FBV0MsR0FBWCxXQUFrQkwsR0FBRyxDQUFDTyxPQUF0QixFQUFaLEVBQThDUCxHQUE5QztBQUNUQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsa0JBQU1DLElBQU4sQ0FBV08sS0FBWCxDQUFpQixHQUFqQixDQUFaLDhCQUF3RDVCLElBQXhEO0FBQ0QsQ0FIRCxFLENBSUE7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgY29ycyBmcm9tIFwiY29yc1wiO1xyXG5pbXBvcnQgZGJDb25uZWN0aW9uIGZyb20gXCIuL2RiL2Nvbm5lY3Rpb24uanNcIjtcclxuaW1wb3J0IG1vcmdhbiBmcm9tIFwibW9yZ2FuXCI7XHJcbmltcG9ydCBjaGFsayBmcm9tIFwiY2hhbGtcIjtcclxuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSBcImJvZHktcGFyc2VyXCI7XHJcblxyXG5pbXBvcnQgYXBpUm91dGVyIGZyb20gXCIuL3JvdXRlcy9yb3V0ZXMuanNcIjtcclxuXHJcbmNvbnN0IFBPUlQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDA7XHJcblxyXG4vL0Bpbml0aWFsaXppbmcgQXBwXHJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcclxuYXBwLnVzZShtb3JnYW4oXCJkZXZcIikpO1xyXG5hcHAudXNlKGNvcnMoeyBvcmlnaW46IHRydWUgfSkpO1xyXG5cclxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oeyBsaW1pdDogXCIzMG1iXCIsIGV4dGVuZGVkOiB0cnVlIH0pKTtcclxuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBsaW1pdDogXCIzMG1iXCIsIGV4dGVuZGVkOiB0cnVlIH0pKTtcclxuXHJcbmFwcC51c2UoXCIvYXBpXCIsIGFwaVJvdXRlcik7XHJcblxyXG5hcHAudXNlKFwiL1wiLCAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICByZXMuc2VuZChcIkJhY2tlbmQgUnVubmluZy5cIik7XHJcbn0pO1xyXG5cclxuLy8gSGFuZGxlIFVuY2F1Z2h0IGV4Y2VwdGlvbnNcclxucHJvY2Vzcy5vbihcInVuY2F1Z2h0RXhjZXB0aW9uXCIsIChlcnIpID0+IHtcclxuICBjb25zb2xlLmxvZyhcclxuICAgIGNoYWxrLmJvbGQucmVkKGBFUlJPUiBNRVNTQUdFOiBgKSxcclxuICAgIGNoYWxrLmJvbGQuYmx1ZShgJHtlcnIubWVzc2FnZX1gKVxyXG4gICk7XHJcbiAgLy8gY29uc29sZS5sb2coY2hhbGsuYm9sZC5yZWQoYEVSUk9SIFNUQUNLOiBgKSwgYCR7ZXJyLnN0YWNrfWApO1xyXG4gIGNvbnNvbGUubG9nKGNoYWxrLnJlZChcIlNodXR0aW5nIERvd24gU2VydmVyIGR1ZSB0byBVbmNhdWdodCBFeGNlcHRpb25cIikpO1xyXG4gIHByb2Nlc3MuZXhpdCgxKTtcclxufSk7XHJcblxyXG4vLyBIYW5kbGUgVW5oYW5kbGVkIFByb21pc2UgcmVqZWN0aW9uc1xyXG5wcm9jZXNzLm9uKFwidW5oYW5kbGVkUmVqZWN0aW9uXCIsIChlcnIpID0+IHtcclxuICBjb25zb2xlLmxvZyhcclxuICAgIGNoYWxrLmJvbGQucmVkKGBFUlJPUiBNRVNTQUdFOiBgKSxcclxuICAgIGNoYWxrLmJvbGQuYmx1ZShgJHtlcnIubWVzc2FnZX1gKVxyXG4gICk7XHJcbiAgY29uc29sZS5sb2coY2hhbGsuYm9sZC5yZWQoYEVSUk9SIFNUQUNLOiBgKSwgYCR7ZXJyLnN0YWNrfWApO1xyXG4gIGNvbnNvbGUubG9nKFxyXG4gICAgY2hhbGsuYm9sZC5yZWQoXHJcbiAgICAgIFwiU2h1dHRpbmcgZG93biB0aGUgc2VydmVyIGR1ZSB0byBVbmhhbmRsZWQgUHJvbWlzZSByZWplY3Rpb25cIlxyXG4gICAgKVxyXG4gICk7XHJcbiAgcHJvY2Vzcy5leGl0KDEpO1xyXG59KTtcclxuXHJcbi8vQFN0YXJ0aW5nIFNlcnZlclxyXG5hcHAubGlzdGVuKFBPUlQsIChlcnIpID0+IHtcclxuICBpZiAoZXJyKSBjb25zb2xlLmxvZyhjaGFsay5ib2xkLnJlZChgJHtlcnIubWVzc2FnZX1gKSwgZXJyKTtcclxuICBjb25zb2xlLmxvZyhjaGFsay5ib2xkLmdyZWVuKFwi4pyTXCIpLCBgTGlzdGVuaW5nIG9uIHBvcnQgJHtQT1JUfWApO1xyXG59KTtcclxuLy8gQENvbm5lY3RpbmcgdG8gRGF0YWJhc2VcclxuZGJDb25uZWN0aW9uKCk7XHJcbiJdfQ==