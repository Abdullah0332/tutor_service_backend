"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _connection = _interopRequireDefault(require("./db/connection.js"));

var _morgan = _interopRequireDefault(require("morgan"));

var _chalk = _interopRequireDefault(require("chalk"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _routes = _interopRequireDefault(require("./routes/routes.js"));

var PORT = process.env.PORT || 3000; //@initializing App

var app = (0, _express["default"])();
app.use((0, _morgan["default"])("dev"));
app.use((0, _cors["default"])({
  origin: true
}));
app.use(_bodyParser["default"].json({
  limit: "30mb",
  extended: true
}));
app.use(_bodyParser["default"].urlencoded({
  limit: "30mb",
  extended: true
}));
app.use("/api", _routes["default"]);
app.use("/", function (req, res, next) {
  res.send("Backend Running.");
}); // Handle Uncaught exceptions

process.on("uncaughtException", function (err) {
  console.log(_chalk["default"].bold.red("ERROR MESSAGE: "), _chalk["default"].bold.blue("".concat(err.message))); // console.log(chalk.bold.red(`ERROR STACK: `), `${err.stack}`);

  console.log(_chalk["default"].red("Shutting Down Server due to Uncaught Exception"));
  process.exit(1);
}); // Handle Unhandled Promise rejections

process.on("unhandledRejection", function (err) {
  console.log(_chalk["default"].bold.red("ERROR MESSAGE: "), _chalk["default"].bold.blue("".concat(err.message)));
  console.log(_chalk["default"].bold.red("ERROR STACK: "), "".concat(err.stack));
  console.log(_chalk["default"].bold.red("Shutting down the server due to Unhandled Promise rejection"));
  process.exit(1);
}); //@Starting Server

app.listen(PORT, function (err) {
  if (err) console.log(_chalk["default"].bold.red("".concat(err.message)), err);
  console.log(_chalk["default"].bold.green("âœ“"), "Listening on port ".concat(PORT));
}); // @Connecting to Database

(0, _connection["default"])();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJQT1JUIiwicHJvY2VzcyIsImVudiIsImFwcCIsInVzZSIsIm9yaWdpbiIsImJvZHlQYXJzZXIiLCJqc29uIiwibGltaXQiLCJleHRlbmRlZCIsInVybGVuY29kZWQiLCJhcGlSb3V0ZXIiLCJyZXEiLCJyZXMiLCJuZXh0Iiwic2VuZCIsIm9uIiwiZXJyIiwiY29uc29sZSIsImxvZyIsImNoYWxrIiwiYm9sZCIsInJlZCIsImJsdWUiLCJtZXNzYWdlIiwiZXhpdCIsInN0YWNrIiwibGlzdGVuIiwiZ3JlZW4iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFFQSxJQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixJQUFaLElBQW9CLElBQWpDLEMsQ0FFQTs7QUFDQSxJQUFNRyxHQUFHLEdBQUcsMEJBQVo7QUFDQUEsR0FBRyxDQUFDQyxHQUFKLENBQVEsd0JBQU8sS0FBUCxDQUFSO0FBQ0FELEdBQUcsQ0FBQ0MsR0FBSixDQUFRLHNCQUFLO0FBQUVDLEVBQUFBLE1BQU0sRUFBRTtBQUFWLENBQUwsQ0FBUjtBQUVBRixHQUFHLENBQUNDLEdBQUosQ0FBUUUsdUJBQVdDLElBQVgsQ0FBZ0I7QUFBRUMsRUFBQUEsS0FBSyxFQUFFLE1BQVQ7QUFBaUJDLEVBQUFBLFFBQVEsRUFBRTtBQUEzQixDQUFoQixDQUFSO0FBQ0FOLEdBQUcsQ0FBQ0MsR0FBSixDQUFRRSx1QkFBV0ksVUFBWCxDQUFzQjtBQUFFRixFQUFBQSxLQUFLLEVBQUUsTUFBVDtBQUFpQkMsRUFBQUEsUUFBUSxFQUFFO0FBQTNCLENBQXRCLENBQVI7QUFFQU4sR0FBRyxDQUFDQyxHQUFKLENBQVEsTUFBUixFQUFnQk8sa0JBQWhCO0FBRUFSLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLEdBQVIsRUFBYSxVQUFDUSxHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxFQUFvQjtBQUMvQkQsRUFBQUEsR0FBRyxDQUFDRSxJQUFKLENBQVMsa0JBQVQ7QUFDRCxDQUZELEUsQ0FJQTs7QUFDQWQsT0FBTyxDQUFDZSxFQUFSLENBQVcsbUJBQVgsRUFBZ0MsVUFBQ0MsR0FBRCxFQUFTO0FBQ3ZDQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FDRUMsa0JBQU1DLElBQU4sQ0FBV0MsR0FBWCxtQkFERixFQUVFRixrQkFBTUMsSUFBTixDQUFXRSxJQUFYLFdBQW1CTixHQUFHLENBQUNPLE9BQXZCLEVBRkYsRUFEdUMsQ0FLdkM7O0FBQ0FOLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxrQkFBTUUsR0FBTixDQUFVLGdEQUFWLENBQVo7QUFDQXJCLEVBQUFBLE9BQU8sQ0FBQ3dCLElBQVIsQ0FBYSxDQUFiO0FBQ0QsQ0FSRCxFLENBVUE7O0FBQ0F4QixPQUFPLENBQUNlLEVBQVIsQ0FBVyxvQkFBWCxFQUFpQyxVQUFDQyxHQUFELEVBQVM7QUFDeENDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUNFQyxrQkFBTUMsSUFBTixDQUFXQyxHQUFYLG1CQURGLEVBRUVGLGtCQUFNQyxJQUFOLENBQVdFLElBQVgsV0FBbUJOLEdBQUcsQ0FBQ08sT0FBdkIsRUFGRjtBQUlBTixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsa0JBQU1DLElBQU4sQ0FBV0MsR0FBWCxpQkFBWixZQUFnREwsR0FBRyxDQUFDUyxLQUFwRDtBQUNBUixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FDRUMsa0JBQU1DLElBQU4sQ0FBV0MsR0FBWCxDQUNFLDZEQURGLENBREY7QUFLQXJCLEVBQUFBLE9BQU8sQ0FBQ3dCLElBQVIsQ0FBYSxDQUFiO0FBQ0QsQ0FaRCxFLENBY0E7O0FBQ0F0QixHQUFHLENBQUN3QixNQUFKLENBQVczQixJQUFYLEVBQWlCLFVBQUNpQixHQUFELEVBQVM7QUFDeEIsTUFBSUEsR0FBSixFQUFTQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsa0JBQU1DLElBQU4sQ0FBV0MsR0FBWCxXQUFrQkwsR0FBRyxDQUFDTyxPQUF0QixFQUFaLEVBQThDUCxHQUE5QztBQUNUQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsa0JBQU1DLElBQU4sQ0FBV08sS0FBWCxDQUFpQixHQUFqQixDQUFaLDhCQUF3RDVCLElBQXhEO0FBQ0QsQ0FIRCxFLENBSUE7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IGNvcnMgZnJvbSBcImNvcnNcIjtcbmltcG9ydCBkYkNvbm5lY3Rpb24gZnJvbSBcIi4vZGIvY29ubmVjdGlvbi5qc1wiO1xuaW1wb3J0IG1vcmdhbiBmcm9tIFwibW9yZ2FuXCI7XG5pbXBvcnQgY2hhbGsgZnJvbSBcImNoYWxrXCI7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcblxuaW1wb3J0IGFwaVJvdXRlciBmcm9tIFwiLi9yb3V0ZXMvcm91dGVzLmpzXCI7XG5cbmNvbnN0IFBPUlQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDA7XG5cbi8vQGluaXRpYWxpemluZyBBcHBcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmFwcC51c2UobW9yZ2FuKFwiZGV2XCIpKTtcbmFwcC51c2UoY29ycyh7IG9yaWdpbjogdHJ1ZSB9KSk7XG5cbmFwcC51c2UoYm9keVBhcnNlci5qc29uKHsgbGltaXQ6IFwiMzBtYlwiLCBleHRlbmRlZDogdHJ1ZSB9KSk7XG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGxpbWl0OiBcIjMwbWJcIiwgZXh0ZW5kZWQ6IHRydWUgfSkpO1xuXG5hcHAudXNlKFwiL2FwaVwiLCBhcGlSb3V0ZXIpO1xuXG5hcHAudXNlKFwiL1wiLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgcmVzLnNlbmQoXCJCYWNrZW5kIFJ1bm5pbmcuXCIpO1xufSk7XG5cbi8vIEhhbmRsZSBVbmNhdWdodCBleGNlcHRpb25zXG5wcm9jZXNzLm9uKFwidW5jYXVnaHRFeGNlcHRpb25cIiwgKGVycikgPT4ge1xuICBjb25zb2xlLmxvZyhcbiAgICBjaGFsay5ib2xkLnJlZChgRVJST1IgTUVTU0FHRTogYCksXG4gICAgY2hhbGsuYm9sZC5ibHVlKGAke2Vyci5tZXNzYWdlfWApXG4gICk7XG4gIC8vIGNvbnNvbGUubG9nKGNoYWxrLmJvbGQucmVkKGBFUlJPUiBTVEFDSzogYCksIGAke2Vyci5zdGFja31gKTtcbiAgY29uc29sZS5sb2coY2hhbGsucmVkKFwiU2h1dHRpbmcgRG93biBTZXJ2ZXIgZHVlIHRvIFVuY2F1Z2h0IEV4Y2VwdGlvblwiKSk7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn0pO1xuXG4vLyBIYW5kbGUgVW5oYW5kbGVkIFByb21pc2UgcmVqZWN0aW9uc1xucHJvY2Vzcy5vbihcInVuaGFuZGxlZFJlamVjdGlvblwiLCAoZXJyKSA9PiB7XG4gIGNvbnNvbGUubG9nKFxuICAgIGNoYWxrLmJvbGQucmVkKGBFUlJPUiBNRVNTQUdFOiBgKSxcbiAgICBjaGFsay5ib2xkLmJsdWUoYCR7ZXJyLm1lc3NhZ2V9YClcbiAgKTtcbiAgY29uc29sZS5sb2coY2hhbGsuYm9sZC5yZWQoYEVSUk9SIFNUQUNLOiBgKSwgYCR7ZXJyLnN0YWNrfWApO1xuICBjb25zb2xlLmxvZyhcbiAgICBjaGFsay5ib2xkLnJlZChcbiAgICAgIFwiU2h1dHRpbmcgZG93biB0aGUgc2VydmVyIGR1ZSB0byBVbmhhbmRsZWQgUHJvbWlzZSByZWplY3Rpb25cIlxuICAgIClcbiAgKTtcbiAgcHJvY2Vzcy5leGl0KDEpO1xufSk7XG5cbi8vQFN0YXJ0aW5nIFNlcnZlclxuYXBwLmxpc3RlbihQT1JULCAoZXJyKSA9PiB7XG4gIGlmIChlcnIpIGNvbnNvbGUubG9nKGNoYWxrLmJvbGQucmVkKGAke2Vyci5tZXNzYWdlfWApLCBlcnIpO1xuICBjb25zb2xlLmxvZyhjaGFsay5ib2xkLmdyZWVuKFwi4pyTXCIpLCBgTGlzdGVuaW5nIG9uIHBvcnQgJHtQT1JUfWApO1xufSk7XG4vLyBAQ29ubmVjdGluZyB0byBEYXRhYmFzZVxuZGJDb25uZWN0aW9uKCk7XG4iXX0=